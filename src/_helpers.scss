// Variables used to ensure consistency but don't need to be changed at runtime.

// Weights
$normal: 400;
$semi: 500;
$bold: 600;
$bolder: 700;
$boldest: 800;

// Margin
$m-xs: 0.375rem;
$m-sm: 0.5rem;
$m: 0.75rem;
$m-lg: 1rem;
$m-xl: 1.125rem; 

// Padding
$p-xs: $m-xs;
$p-sm: $m-sm;
$p: $m;
$p-lg: $m-lg;
$p-xl: $m-xl;

// Font sizes
$fs-xs: 0.75rem;
$fs-sm: 0.875rem;
$fs: 1rem;
$fs-lg: 1.125rem;
$fs-xl: 1.25rem;

// Radii
$r-xs: 3px;
$r-sm: 4px;
$r-md: 6px;
$r-lg: 8px;
$r-xl: 50%;

@mixin transition {
    transition: 150ms ease;
}

@mixin focus {
    outline: none;
    box-shadow: 0 0 0 3px var(--primary-glass-active);
}

@mixin active {
    box-shadow: none;
}

@mixin disabled {
    cursor: not-allowed;
    opacity: 0.4;
}

@use 'sass:color';

// Default theme colors
$c-red: hsl(353, 100%, 46%);
$c-fire: hsl(15, 90%, 54%);
$c-orange: hsl(31, 100%, 54%);
$c-gold: hsl(44, 100%, 54%);
$c-yellow: hsl(44, 100%, 50%);
$c-lime: hsl(74, 82%, 47%);
$c-green: hsl(120, 69%, 45%);
$c-cyan: hsl(174, 69%, 45%);
$c-blue: hsl(220, 100%, 50%);
$c-navy: hsl(236, 82%, 48%);
$c-purple: hsl(270, 64%, 45%);
$c-pink: hsl(300, 100%, 50%);
$c-black: hsl(205, 100%, 7%);
$c-gray: hsl(204, 15%, 53%);
$c-light-gray: hsl(200, 6%, 91%);
$c-white: hsl(0, 0%, 100%);

/* 
    The theme mixin generates all required css color variables for the app.
    These variables are used througout the entire library, but can be used
    throughout the app as well to ensure custom components are consistent
    with the library. 
*/
@mixin theme(
    // Interactive colors
    $primary: $c-blue,

    // Colors
    $red: $c-red, 
    $fire: $c-fire,
    $orange: $c-orange, 
    $yellow: $c-yellow, 
    $green: $c-green, 
    $blue: $c-blue, 
    $purple: $c-purple,
    $black: $c-black,
    $gray: $c-gray,

    // Functional colors
    $text: $c-black, 
    $text-secondary: $c-gray,
    $text-inverse: $c-white, 
    $border: $c-gray, 
    $border-secondary: $c-light-gray,
    $background: $c-white, 
    $body-background: darken($c-white, 5%),
    $focus: lighten($c-blue, 20%),

    // Stops
    $lightness-hover: -10%, 
    $lightness-active: -20%,
    $glass-alpha: 0.10, 
    $glass-alpha-hover: 0.18, 
    $glass-alpha-active: 0.26 
) {
    /* 
        Interactive colors
        
        Colors that indicate different types of interactive elements
        as well as convey different types of information

        These colors have the ability to:
        - Get the raw color
        - Get a color for hover
        - Get a color for active
        - Adjust alpha using rgba
    */

    @each $name, $color in (
        'primary': $primary, 

        'red': $red,
        'orange': $orange,
        'yellow': $yellow,
        'green': $green,
        'blue': $blue,
        'purple': $purple,
        'gray': $gray,
        'black': $black
    ) {
        --#{$name}: #{$color};
        --#{$name}-hover: #{adjust-color($color, $lightness: $lightness-hover)};
        --#{$name}-active: #{adjust-color($color, $lightness: $lightness-active)};
        --#{$name}-glass: #{rgba($color, $alpha: $glass-alpha)};
        --#{$name}-glass-hover: #{rgba($color, $alpha: $glass-alpha-hover)};;
        --#{$name}-glass-active: #{rgba($color, $alpha: $glass-alpha-active)};;
    }

    /*
        Functional colors
        Each of these colors is used for a specific yet fundamental function.

        These colors have the ability to:
        - Get the raw color
    */
    @each $name, $color in (
        'text': $text,
        'text-secondary': $text-secondary,
        'text-inverse': $text-inverse,
        'border': $border,
        'border-secondary': $border-secondary,
        'background': $background,
        'body-background': $body-background,
        'focus': $focus,
    ) {
        --#{$name}: #{$color};
    }
}